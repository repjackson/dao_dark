head
    title dao
    meta(name='viewport', content='user-scalable=no, initial-scale=1.0, maximum-scale=1.0, width=device-width')
    meta(name="theme-color", content="#ffffff")
    link(rel="stylesheet" type="text/css" href="//fonts.googleapis.com/css?family=Ubuntu")

body
    +home


template(name='home')
    .ui.attached.inverted.borderless.menu
        .item.create_delta.pointer
            .white_bat.font_200 DAO
        if currentUser
            .item.profile.pointer
                i.user.icon
                | #{currentUser.username}
            .item.logout.pointer
                i.sign.out.alternate.icon
            if current_delta
                // h2.ui.header 
                //     if current_module.icon
                //         i.icon(class=current_module.icon)  
                //     | #{current_module.title}
                .pointer.icon.item.add_doc
                    i.plus.icon
                .pointer.icon.item.delete_delta
                    i.remove.icon
                .pointer.icon.item.print_delta
                    i.code.icon
                .pointer.icon.item.recalc
                    i.refresh.icon
        else
            .item
                i.sign.in.alternate.icon
    .ui.padded.grid
        .row
            .sixteen.wide.column
                if currentUser
                    each current_delta.facets
                        .row
                            unless hidden
                                +facet
                            div
                    if one_result
                        .ui.centered.stackable.cards
                            each current_delta.results
                                +result
                else
                    .black.row
                        .twelve.wide.column
                            +loginButtons
                    
                    

template(name='facet')
    .ui.small.inline.header #{key}
    // each filters
    //     .unselect.ui.blue.button #{this}
    each res
        if name
            .ui.button.toggle_selection(class=toggle_value_class)
                strong #{name}
                small #{count}
            